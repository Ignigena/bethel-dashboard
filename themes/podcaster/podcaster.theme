<?php

/**
 * @file
 * Functions to support theming in the Bartik theme.
 */
 
function podcaster_library_info() {
  $libraries['drupal.node'] = array(
    'title' => 'Node',
    'version' => VERSION,
    'js' => array(
      drupal_get_path('module', 'node') . '/node.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK() for html.tpl.php.
 *
 * Adds body classes if certain regions have content.
 */
function podcaster_preprocess_html(&$variables) {
  drupal_add_css(libraries_get_path('bootstrap') . '/css/bootstrap.min.css');
  drupal_add_css(libraries_get_path('bootstrap') . '/css/bootstrap-theme.min.css');
  drupal_add_js(libraries_get_path('bootstrap') . '/js/bootstrap.min.js');

  if (!empty($variables['page']['featured'])) {
    $variables['attributes']['class'][] = 'featured';
  }

  if (!empty($variables['page']['triptych_first'])
    || !empty($variables['page']['triptych_middle'])
    || !empty($variables['page']['triptych_last'])) {
    $variables['attributes']['class'][] = 'triptych';
  }

  if (!empty($variables['page']['footer_firstcolumn'])
    || !empty($variables['page']['footer_secondcolumn'])
    || !empty($variables['page']['footer_thirdcolumn'])
    || !empty($variables['page']['footer_fourthcolumn'])) {
    $variables['attributes']['class'][] = 'footer-columns';
  }
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function podcaster_preprocess_page(&$variables) {
  // Pass the main menu and secondary menu to the template as render arrays.
  if (!empty($variables['main_menu'])) {
    $variables['main_menu']['#attributes']['id'] = 'primary-menu-links';
    $variables['main_menu']['#attributes']['class'] = array('nav', 'nav-pills');
  }
  if (!empty($variables['secondary_menu'])) {
    $variables['secondary_menu']['#attributes']['id'] = 'secondary-menu-links';
    $variables['secondary_menu']['#attributes']['class'] = array('links', 'inline', 'clearfix');
  }

  $site_config = Drupal::config('system.site');
  // Always print the site name and slogan, but if they are toggled off, we'll
  // just hide them visually.
  $variables['hide_site_name']   = theme_get_setting('features.name') ? FALSE : TRUE;
  $variables['hide_site_slogan'] = theme_get_setting('features.slogan') ? FALSE : TRUE;
  if ($variables['hide_site_name']) {
    // If toggle_name is FALSE, the site_name will be empty, so we rebuild it.
    $variables['site_name'] = check_plain($site_config->get('name'));
  }
  if ($variables['hide_site_slogan']) {
    // If toggle_site_slogan is FALSE, the site_slogan will be empty, so we rebuild it.
    $variables['site_slogan'] = filter_xss_admin($site_config->get('slogan'));
  }
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render elements.
    $variables['title_prefix']['shortcut_wrapper'] = array(
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    );
    $variables['title_suffix']['shortcut_wrapper'] = array(
      '#markup' => '</div>',
      '#weight' => -99,
    );
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
  
  if (isset($variables['page']['content']['podcaster.content']['content'][0]['user_picture']['#items'])) {
    $image = array(
      'style_name' => 'hero',
      'uri' => $variables['page']['content']['podcaster.content']['content'][0]['user_picture']['#items'][0]['entity']->values['uri']['und'],
      'width' => '',
      'height' => '',
    );
    
    unset($variables['page']['content']['podcaster.content']['content'][0]['user_picture']);
    
    $variables['hero'] = theme_image_style($image);
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function podcaster_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }
  drupal_add_css(drupal_get_path('theme', 'bartik') . '/css/maintenance-page.css');
  $variables['styles'] = drupal_get_css();

  $site_config = Drupal::config('system.site');
  // Always print the site name and slogan, but if they are toggled off, we'll
  // just hide them visually.
  $variables['hide_site_name']   = theme_get_setting('features.name') ? FALSE : TRUE;
  $variables['hide_site_slogan'] = theme_get_setting('features.slogan') ? FALSE : TRUE;
  if ($variables['hide_site_name']) {
    // If toggle_name is FALSE, the site_name will be empty, so we rebuild it.
    $variables['site_name'] = check_plain($site_config->get('name'));
  }
  if ($variables['hide_site_slogan']) {
    // If toggle_site_slogan is FALSE, the site_slogan will be empty, so we rebuild it.
    $variables['site_slogan'] = filter_xss_admin($site_config->get('slogan'));
  }
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function podcaster_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements theme_menu_tree().
 */
function podcaster_menu_tree($variables) {
  return '<ul class="menu clearfix">' . $variables['tree'] . '</ul>';
}

/**
 * Implements theme_menu_tree__shortcut_default() {
 */
function podcaster_menu_tree__shortcut_default($variables) {
  return '<ul class="menu">' . $variables['tree'] . '</ul>';
}

/**
 * Implements theme_field__field_type().
 */
function podcaster_field__taxonomy_term_reference($variables) {
  $output = '';

  // Render the label, if it's not hidden.
  if (!$variables['label_hidden']) {
    $output .= '<h3 class="field-label">' . $variables['label'] . ': </h3>';
  }

  // Render the items.
  $output .= ($variables['element']['#label_display'] == 'inline') ? '<ul class="links inline">' : '<ul class="links">';
  foreach ($variables['items'] as $delta => $item) {
    $output .= '<li class="taxonomy-term-reference-' . $delta . '"' . $variables['item_attributes'][$delta] . '>' . drupal_render($item) . '</li>';
  }
  $output .= '</ul>';

  // Render the top-level DIV.
  $variables['attributes']['class'][] = 'clearfix';
  $output = '<div ' . $variables['attributes'] . '>' . $output . '</div>';

  return $output;
}

function podcaster_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login_form') {
    $form['name']['#title'] = '';
    $form['name']['#description'] = '';
    $form['name']['#attributes']['class'] = array('form-control');
    $form['name']['#attributes']['placeholder'] = 'Username';
    $form['name']['#required'] = FALSE;
    
    $form['pass']['#title'] = '';
    $form['pass']['#description'] = '';
    $form['pass']['#attributes']['class'] = array('form-control');
    $form['pass']['#attributes']['placeholder'] = 'Password';
    $form['pass']['#required'] = FALSE;
    
    $form['actions']['submit']['#attributes']['class'] = array('btn', 'btn-lg', 'btn-primary', 'btn-block');
    
    drupal_set_title('Please log in');
  }
}

function podcaster_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'user/%') {
    $tabs = $data['tabs'][0];
    
    foreach ($tabs as $path => $tab) {
      $title = $data['tabs'][0][$path]['#link']['title'];
  
      if ($title == "View") {
        $data['tabs'][0][$path]['#link']['title'] = "My Podcasts";
      } else if ($title == "Edit") {
        $data['tabs'][0][$path]['#link']['title'] = "Edit Account";
      }
    }
  }
}
